"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.cancelIfRebasing = exports.registerHookInterruptionHandler = void 0;

var _execa = _interopRequireDefault(require("execa"));

var _fs = _interopRequireDefault(require("fs"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const withHook = answers => {
  try {
    const scope = answers.scope ? `(${answers.scope}): ` : '';
    const title = `${answers.gitmoji} ${scope}${answers.title}`;
    const commitMessage = `${title}\n\n${answers.message}`;

    _fs.default.writeFileSync(process.argv[3], commitMessage);
  } catch (error) {
    console.error(error);
    process.exit(1);
  } finally {
    process.exit(0);
  }
};

const registerHookInterruptionHandler = () => {
  // Allow to interrupt the hook without cancelling the commit
  process.on('SIGINT', () => {
    console.warn('gitmoji-cli was interrupted');
    process.exit(0);
  });
};

exports.registerHookInterruptionHandler = registerHookInterruptionHandler;

const cancelIfRebasing = () => (0, _execa.default)('git', ['rev-parse', '--absolute-git-dir']).then(({
  stdout: gitDirectory
}) => {
  // see https://stackoverflow.com/questions/3921409/how-to-know-if-there-is-a-git-rebase-in-progress
  // to understand how a rebase is detected
  if (_fs.default.existsSync(gitDirectory + '/rebase-merge') || _fs.default.existsSync(gitDirectory + '/rebase-apply')) {
    process.exit(0);
  }
});

exports.cancelIfRebasing = cancelIfRebasing;
var _default = withHook;
exports.default = _default;